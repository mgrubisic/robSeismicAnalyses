function [meanLoss, CDFsLossDirect] = VULNERABILITYbuilding(...
    fragilities, damageLossRatios, plotter, varargin)
%VULNERABILITYbuilding calculates the vulnerability curve provided a set of
%fragility functions and the corresponding sets of loss ratios
%
%   Detailed explanation goes here

%% Example (vulnerability pre-code, 4-storey: Karim MSc)

% fragMedian = [0.102 0.381 0.832];
% fragStDev = [0.2774 0.2774 0.2774];
% 
% IMfrag = (0:0.005:2.5)';
% PROBfrag = zeros(numel(IMfrag),3);
% 
% for ds = 1:3
%     PROBfrag(:,ds) = logncdf(IMfrag,log(fragMedian(1,ds)),fragStDev(1,ds));
% end
% 
% fragilities(:,1) = IMfrag;
% fragilities(:,2:ds+1) = PROBfrag;
% 
% LOSSratios = [0 0.1 0.75 1]; % DS0, DS1, DS2, DS3
% CoVdlr = [ 0 0.43 0.308 0.134 ];
% 
% fxIndLoss = @(Ldir,par)par(1)*normcdf(Ldir,0.5,par(2));
% parIndLosses = [2, 0.15];
% 
% [vulnerability] = VULNERABILITYbuilding(fragilities, LOSSratios, ...
%     'plot', 'S_{a}(T_{1}) [g]', CoVdlr, fxIndLoss, parIndLosses);

%% Optional input

% max number of inputs
numvarargs = length(varargin);
if numvarargs > 4
    error('myfuns:somefun2Alt:TooManyInputs', ...
        'requires at most 4 optional inputs');
end

% set defaults for optional inputs
optargs = { 'S_{a}(T_{1}) [g]', 0, @(Ldir, parIndLoss)zeros(size(Ldir)), [2, 0.15] };

% now put these defaults into the valuesToUse cell array, 
% and overwrite with the ones specified in varargin.
optargs(1:numvarargs) = varargin;
% or ...
% [optargs{1:numvarargs}] = varargin{:};

% Place optional args in memorable variable names
[ nameIM, CoVdlr, fxIndLoss, parIndLosses ] = optargs{:};

%% Calculate vulnerability

% calculate probability of having different damage states, given IM
probDS = [ones(size(fragilities,1),1) fragilities(:,2:end)] - ...
    [fragilities(:,2:end) zeros(size(fragilities,1),1)];
% NOTE: the first column contains the probability of DS0 (no damage)

% reshape (to avoid a for loop)
damageLossRatiosRESHAPED = meshgrid(...
    damageLossRatios, ones(size(fragilities,1),1));

% calculate vulnerability (direct)
meanLoss(:,1) = fragilities(:,1);
meanLoss(:,2) = sum( probDS .* damageLossRatiosRESHAPED, 2 );

% calculate vulnerability (indirect)
meanLoss(:,3) = fxIndLoss(meanLoss(:,2), parIndLosses);

%% P(L<l|IM) distribution (only direct losses, for now)

if numel(CoVdlr)~=1
    % P(L<l|DSk): beta distributions (validated against Galanis 2018)
    alfa = (1-damageLossRatios)./CoVdlr.^2 - damageLossRatios;
    beta = alfa .* (1-damageLossRatios) ./ damageLossRatios;
    
    LOSSdef = linspace(0,1,100)';
    
    for ds = numel(damageLossRatios) : -1 : 2
        CDFlossDSmatrix(1,:,ds) = betacdf(LOSSdef, alfa(ds), beta(ds));
    end
    CDFlossDSmatrix(1,:,1) = 1; % P(L<l|DS0) = 1 for any l
    
    
    %%% scrivere meglio
    for im = size(fragilities,1) : -1 : 1
        CDFlossDSmatrix(im,:,:) = CDFlossDSmatrix(1,:,:);
    end
    
    for l = numel(LOSSdef):-1:1; probDS3d(:,l,:) = probDS; end
    %%% scrivere meglio
    
    % calculate P(L<l|IM)
    CDFsLossDirect.IMdef = fragilities(:,1);
    CDFsLossDirect.LOSSdef = LOSSdef;
    CDFsLossDirect.CDFlossIM = sum( CDFlossDSmatrix .* probDS3d, 3 );
    
    CDFsLossDirect.CDFlossDS = squeeze(CDFlossDSmatrix(1,:,:));
else
    CDFsLossDirect = 0;
end

%% Plot

if strcmp(plotter, 'plot')
    f = figure; hold on
    plot(meanLoss(:,1), meanLoss(:,2), 'LineWidth', 2)
    plot(meanLoss(:,1), meanLoss(:,3), 'LineWidth', 2)
    xlabel(nameIM); ylabel('Mean loss ratio [-]');
    f.Children.FontSize = 18;
    
    if numel(CoVdlr)~=1
        figure; hold on
        for ds = 1 : numel(damageLossRatios)
            plot(LOSSdef, CDFlossDSmatrix(1,:,ds), 'LineWidth', 2)
        end
        DSs = 0 : numel(damageLossRatios)-1;
        legend(strcat('DS', num2str(DSs(:))))
        xlabel('Loss ratio, lr')
        ylabel('P(LR\geqlr|DS)')
        set(gca, 'FontSize', 18)
        
        
        figure; hold on
        percentiles = [5 50 95];
        for p = 1 : numel(percentiles)
            plot(CDFsLossDirect.IMdef, prctile(CDFsLossDirect.CDFlossIM, percentiles(p), 2), ...
                'LineWidth', 2)
        end
        plot(CDFsLossDirect.IMdef, mean(CDFsLossDirect.CDFlossIM, 2), '--', 'LineWidth', 2)
        %plot(meanLoss(:,1), 1-meanLoss(:,2), 'LineWidth', 2) % validation
        legend('5%', 'Median', '95%', 'Mean')
        xlabel(nameIM); ylabel('P(L\leq percentile|IM) [-]');
        set(gca, 'FontSize', 18)
        
        
        figure; hold on
        selIMs = [0.005 0.2 0.3 0.8 1.2]; % [g]
        for im = numel(selIMs) : -1 : 1
            temp = find(CDFsLossDirect.IMdef>selIMs(im)); 
            indIM(im) = temp(1)-1;
            plot(CDFsLossDirect.LOSSdef, CDFsLossDirect.CDFlossIM(indIM(im), :), ...
                'LineWidth', 2)
        end
        legend(strcat('IM=', num2str(CDFsLossDirect.IMdef(indIM(:))), 'g'))
        xlabel('Loss l'); ylabel('P(L<l|IM) [-]');
        set(gca, 'FontSize', 18)
    end
end

end

